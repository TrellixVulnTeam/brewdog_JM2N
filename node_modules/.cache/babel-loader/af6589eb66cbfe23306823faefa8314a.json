{"ast":null,"code":"var _jsxFileName = \"/Users/matteopolo/reactProjects/Brewdog/src/context.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { useState, useContext, createContext } from \"react\";\nimport useFetch from \"./useFetch\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AppContext = /*#__PURE__*/createContext();\n\nconst AppProvider = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const [queryPage, setQueryPage] = useState(1);\n  const [queryBeerName, setQueryBeerName] = useState(''); //const [queryMinABV, setQueryMinABV] = useState(0);\n  //const [queryMaxABV, setQueryMaxABV] = useState(15);\n  //const [type, setType] = useState(false);\n\n  const {\n    isLoading,\n    data,\n    isError,\n    count\n  } = useFetch(`${queryPage}`, `${queryBeerName}`, `${queryMinABV}`, `${queryMaxABV}`);\n\n  const searchBeer = input => {\n    setQueryBeerName(input); //setQueryMinABV (inputMin);\n    //setQueryMaxABV (inputMax);\n  };\n\n  return /*#__PURE__*/_jsxDEV(AppContext.Provider, {\n    value: {\n      type,\n      setType,\n      queryPage,\n      setQueryPage,\n      queryBeerName,\n      setQueryBeerName,\n      queryMinABV,\n      setQueryMinABV,\n      queryMaABV,\n      setQueryMaxABV,\n      isLoading,\n      data,\n      isError,\n      count,\n      searchBeer\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 12\n  }, this);\n};\n\n_s(AppProvider, \"gpXipLLICNCo370zwgkTkMPM7YQ=\", false, function () {\n  return [useFetch];\n});\n\n_c = AppProvider;\n\nconst useGlobalContext = () => {\n  _s2();\n\n  return useContext(AppContext);\n};\n\n_s2(useGlobalContext, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nexport { AppProvider, useGlobalContext };\n\nvar _c;\n\n$RefreshReg$(_c, \"AppProvider\");","map":{"version":3,"sources":["/Users/matteopolo/reactProjects/Brewdog/src/context.js"],"names":["useState","useContext","createContext","useFetch","AppContext","AppProvider","children","queryPage","setQueryPage","queryBeerName","setQueryBeerName","isLoading","data","isError","count","queryMinABV","queryMaxABV","searchBeer","input","type","setType","setQueryMinABV","queryMaABV","setQueryMaxABV","useGlobalContext"],"mappings":";;;;AAAA,SAASA,QAAT,EAAmBC,UAAnB,EAA+BC,aAA/B,QAAoD,OAApD;AACA,OAAOC,QAAP,MAAqB,YAArB;;AAEA,MAAMC,UAAU,gBAAGF,aAAa,EAAhC;;AAEA,MAAMG,WAAW,GAAG,QAAkB;AAAA;;AAAA,MAAjB;AAAEC,IAAAA;AAAF,GAAiB;AAClC,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BR,QAAQ,CAAC,CAAD,CAA1C;AACA,QAAM,CAACS,aAAD,EAAgBC,gBAAhB,IAAoCV,QAAQ,CAAC,EAAD,CAAlD,CAFkC,CAGlC;AACA;AACA;;AACA,QAAM;AAAEW,IAAAA,SAAF;AAAaC,IAAAA,IAAb;AAAmBC,IAAAA,OAAnB;AAA4BC,IAAAA;AAA5B,MAAqCX,QAAQ,CAAE,GAAEI,SAAU,EAAd,EAAkB,GAAEE,aAAc,EAAlC,EAAsC,GAAEM,WAAY,EAApD,EAAwD,GAAEC,WAAY,EAAtE,CAAnD;;AAEA,QAAMC,UAAU,GAAIC,KAAD,IAAW;AAC1BR,IAAAA,gBAAgB,CAAEQ,KAAF,CAAhB,CAD0B,CAE1B;AACA;AACH,GAJD;;AAMA,sBAAO,QAAC,UAAD,CAAY,QAAZ;AAAqB,IAAA,KAAK,EAC7B;AACIC,MAAAA,IADJ;AAEIC,MAAAA,OAFJ;AAGIb,MAAAA,SAHJ;AAIIC,MAAAA,YAJJ;AAKIC,MAAAA,aALJ;AAMIC,MAAAA,gBANJ;AAOIK,MAAAA,WAPJ;AAQIM,MAAAA,cARJ;AASIC,MAAAA,UATJ;AAUIC,MAAAA,cAVJ;AAWIZ,MAAAA,SAXJ;AAYIC,MAAAA,IAZJ;AAaIC,MAAAA,OAbJ;AAcIC,MAAAA,KAdJ;AAeIG,MAAAA;AAfJ,KADG;AAAA,cAkBFX;AAlBE;AAAA;AAAA;AAAA;AAAA,UAAP;AAoBH,CAlCD;;GAAMD,W;UAMyCF,Q;;;KANzCE,W;;AAoCN,MAAMmB,gBAAgB,GAAG,MAAM;AAAA;;AAC3B,SAAOvB,UAAU,CAACG,UAAD,CAAjB;AACH,CAFD;;IAAMoB,gB;;AAIN,SAASnB,WAAT,EAAsBmB,gBAAtB","sourcesContent":["import { useState, useContext, createContext } from \"react\";\nimport useFetch from \"./useFetch\";\n\nconst AppContext = createContext();\n\nconst AppProvider = ({ children }) => {\n    const [queryPage, setQueryPage] = useState(1);\n    const [queryBeerName, setQueryBeerName] = useState('');\n    //const [queryMinABV, setQueryMinABV] = useState(0);\n    //const [queryMaxABV, setQueryMaxABV] = useState(15);\n    //const [type, setType] = useState(false);\n    const { isLoading, data, isError, count} = useFetch(`${queryPage}`, `${queryBeerName}`, `${queryMinABV}`, `${queryMaxABV}`);\n\n    const searchBeer = (input) => {\n        setQueryBeerName (input);\n        //setQueryMinABV (inputMin);\n        //setQueryMaxABV (inputMax);\n    }\n\n    return <AppContext.Provider value={\n        {\n            type,\n            setType,\n            queryPage,\n            setQueryPage,\n            queryBeerName,\n            setQueryBeerName,\n            queryMinABV,\n            setQueryMinABV,\n            queryMaABV,\n            setQueryMaxABV,\n            isLoading,\n            data,\n            isError,\n            count,\n            searchBeer,\n        }}>\n        {children}\n    </AppContext.Provider>\n}\n\nconst useGlobalContext = () => {\n    return useContext(AppContext)\n}\n\nexport { AppProvider, useGlobalContext };"]},"metadata":{},"sourceType":"module"}