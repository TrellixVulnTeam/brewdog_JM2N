{"ast":null,"code":"var _jsxFileName = \"/Users/matteopolo/reactProjects/Brewdog/src/context.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { useState, useContext, createContext } from \"react\";\nimport useFetch from \"./useFetch\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AppContext = /*#__PURE__*/createContext();\n\nconst AppProvider = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const [query, setQuery] = useState('');\n  const [queryPage, setQueryPage] = useState();\n  const [inputPage, setInputPage] = useState(1);\n  const [favouritesArray, setFavouritesArray] = useState([]);\n  const {\n    isLoading,\n    data,\n    isError\n  } = useFetch(`${query}`);\n\n  const searchBeer = inputQuery => {\n    setQuery(inputQuery);\n  };\n\n  const searchSingleBeer = inputSingleQuery => {\n    setQuery(inputSingleQuery);\n  };\n\n  return /*#__PURE__*/_jsxDEV(AppContext.Provider, {\n    value: {\n      inputPage,\n      setInputPage,\n      query,\n      isLoading,\n      data,\n      isError,\n      searchBeer,\n      searchSingleBeer,\n      favouritesArray,\n      setFavouritesArray\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 12\n  }, this);\n};\n\n_s(AppProvider, \"Uw9Ev7lEloEGbS2I3HIaju6Xh9o=\", false, function () {\n  return [useFetch];\n});\n\n_c = AppProvider;\n\nconst useGlobalContext = () => {\n  _s2();\n\n  return useContext(AppContext);\n};\n\n_s2(useGlobalContext, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nexport { AppProvider, useGlobalContext };\n\nvar _c;\n\n$RefreshReg$(_c, \"AppProvider\");","map":{"version":3,"sources":["/Users/matteopolo/reactProjects/Brewdog/src/context.js"],"names":["useState","useContext","createContext","useFetch","AppContext","AppProvider","children","query","setQuery","queryPage","setQueryPage","inputPage","setInputPage","favouritesArray","setFavouritesArray","isLoading","data","isError","searchBeer","inputQuery","searchSingleBeer","inputSingleQuery","useGlobalContext"],"mappings":";;;;AAAA,SAASA,QAAT,EAAmBC,UAAnB,EAA+BC,aAA/B,QAAoD,OAApD;AACA,OAAOC,QAAP,MAAqB,YAArB;;AAEA,MAAMC,UAAU,gBAAGF,aAAa,EAAhC;;AAEA,MAAMG,WAAW,GAAG,QAAkB;AAAA;;AAAA,MAAjB;AAAEC,IAAAA;AAAF,GAAiB;AAElC,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBR,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACS,SAAD,EAAYC,YAAZ,IAA4BV,QAAQ,EAA1C;AACA,QAAM,CAACW,SAAD,EAAYC,YAAZ,IAA4BZ,QAAQ,CAAC,CAAD,CAA1C;AACA,QAAM,CAACa,eAAD,EAAkBC,kBAAlB,IAAwCd,QAAQ,CAAC,EAAD,CAAtD;AAEA,QAAM;AAAEe,IAAAA,SAAF;AAAaC,IAAAA,IAAb;AAAmBC,IAAAA;AAAnB,MAA+Bd,QAAQ,CAAE,GAAEI,KAAM,EAAV,CAA7C;;AAEA,QAAMW,UAAU,GAAIC,UAAD,IAAgB;AAC/BX,IAAAA,QAAQ,CAACW,UAAD,CAAR;AACH,GAFD;;AAGA,QAAMC,gBAAgB,GAAIC,gBAAD,IAAsB;AAC3Cb,IAAAA,QAAQ,CAACa,gBAAD,CAAR;AACH,GAFD;;AAIA,sBAAO,QAAC,UAAD,CAAY,QAAZ;AAAqB,IAAA,KAAK,EAC7B;AACIV,MAAAA,SADJ;AAEIC,MAAAA,YAFJ;AAGIL,MAAAA,KAHJ;AAIIQ,MAAAA,SAJJ;AAKIC,MAAAA,IALJ;AAMIC,MAAAA,OANJ;AAOIC,MAAAA,UAPJ;AAQIE,MAAAA,gBARJ;AASIP,MAAAA,eATJ;AAUIC,MAAAA;AAVJ,KADG;AAAA,cAaFR;AAbE;AAAA;AAAA;AAAA;AAAA,UAAP;AAeH,CA/BD;;GAAMD,W;UAOmCF,Q;;;KAPnCE,W;;AAiCN,MAAMiB,gBAAgB,GAAG,MAAM;AAAA;;AAC3B,SAAOrB,UAAU,CAACG,UAAD,CAAjB;AACH,CAFD;;IAAMkB,gB;;AAIN,SAASjB,WAAT,EAAsBiB,gBAAtB","sourcesContent":["import { useState, useContext, createContext } from \"react\";\nimport useFetch from \"./useFetch\";\n\nconst AppContext = createContext();\n\nconst AppProvider = ({ children }) => {\n\n    const [query, setQuery] = useState('');\n    const [queryPage, setQueryPage] = useState();\n    const [inputPage, setInputPage] = useState(1);\n    const [favouritesArray, setFavouritesArray] = useState([]);\n\n    const { isLoading, data, isError } = useFetch(`${query}`);\n\n    const searchBeer = (inputQuery) => {\n        setQuery(inputQuery);\n    }\n    const searchSingleBeer = (inputSingleQuery) => {\n        setQuery(inputSingleQuery);\n    }\n\n    return <AppContext.Provider value={\n        {\n            inputPage,\n            setInputPage,\n            query,\n            isLoading,\n            data,\n            isError,\n            searchBeer,\n            searchSingleBeer,\n            favouritesArray,\n            setFavouritesArray,\n        }}>\n        {children}\n    </AppContext.Provider>\n}\n\nconst useGlobalContext = () => {\n    return useContext(AppContext)\n}\n\nexport { AppProvider, useGlobalContext };"]},"metadata":{},"sourceType":"module"}