{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport axios from 'axios';\n\nconst useFetch = query => {\n  _s();\n\n  const [isLoading, setIsLoading] = useState(true);\n  const [data, setData] = useState([]);\n  const [isError, setIsError] = useState(false);\n  let url = `https://api.punkapi.com/v2/beers${query}`;\n\n  async () => {\n    setIsError(false);\n    setIsLoading(false);\n\n    try {\n      const response = await axios.get(url);\n      setData(response.data);\n    } catch (err) {\n      setIsError(true);\n    }\n  };\n\n  return {\n    isLoading,\n    data,\n    isError\n  };\n};\n\n_s(useFetch, \"zHyLK0eWlzlUvHCPLiYzduKlIWI=\");\n\nexport default useFetch;","map":{"version":3,"sources":["/Users/matteopolo/reactProjects/Brewdog/src/useFetch.js"],"names":["useState","axios","useFetch","query","isLoading","setIsLoading","data","setData","isError","setIsError","url","response","get","err"],"mappings":";;AAAA,SAASA,QAAT,QAA0B,OAA1B;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAGA,MAAMC,QAAQ,GAAIC,KAAD,IAAW;AAAA;;AACxB,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BL,QAAQ,CAAC,IAAD,CAA1C;AACA,QAAM,CAACM,IAAD,EAAOC,OAAP,IAAkBP,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACQ,OAAD,EAAUC,UAAV,IAAwBT,QAAQ,CAAC,KAAD,CAAtC;AAEA,MAAIU,GAAG,GAAI,mCAAkCP,KAAM,EAAnD;;AAEA,cAAY;AACRM,IAAAA,UAAU,CAAC,KAAD,CAAV;AACAJ,IAAAA,YAAY,CAAC,KAAD,CAAZ;;AACA,QAAI;AACA,YAAMM,QAAQ,GAAG,MAAMV,KAAK,CAACW,GAAN,CAAUF,GAAV,CAAvB;AACAH,MAAAA,OAAO,CAACI,QAAQ,CAACL,IAAV,CAAP;AACH,KAHD,CAGE,OAAOO,GAAP,EAAY;AACVJ,MAAAA,UAAU,CAAC,IAAD,CAAV;AACH;AACJ,GATD;;AAWA,SAAO;AAAEL,IAAAA,SAAF;AAAaE,IAAAA,IAAb;AAAmBE,IAAAA;AAAnB,GAAP;AAEH,CApBD;;GAAMN,Q;;AAsBN,eAAeA,QAAf","sourcesContent":["import { useState, } from \"react\";\nimport axios from 'axios';\n\n\nconst useFetch = (query) => {\n    const [isLoading, setIsLoading] = useState(true);\n    const [data, setData] = useState([]);\n    const [isError, setIsError] = useState(false);\n\n    let url = `https://api.punkapi.com/v2/beers${query}`;\n\n    async () => {\n        setIsError(false);\n        setIsLoading(false);\n        try {\n            const response = await axios.get(url);\n            setData(response.data);\n        } catch (err) {\n            setIsError(true);\n        }\n    }\n\n    return { isLoading, data, isError };\n\n}\n\nexport default useFetch;"]},"metadata":{},"sourceType":"module"}