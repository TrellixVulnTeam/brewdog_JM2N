{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nimport axios from 'axios';\nimport { useGlobalContext } from \"./context\";\n\nconst useFetch = (query, type) => {\n  _s();\n\n  const baseUrl = `https://api.punkapi.com/v2/beers?page=${inputPage}&abv_gt=${inputMinABV}&abv_lt=${inputMaxABV}`;\n  const [isLoading, setIsLoading] = useState(true);\n  const [data, setData] = useState([]);\n  const [isError, setIsError] = useState(false);\n  const {\n    input,\n    inputPage,\n    inputMinABV,\n    inputMaxABV\n  } = useGlobalContext();\n  let url = baseUrl;\n  type === false ? !input ? url = baseUrl : url = `${baseUrl}${query}` : useEffect(() => {\n    (async () => {\n      setIsError(false);\n      setIsLoading(false);\n\n      try {\n        console.log(url);\n        const response = await axios.get(url); //   const totalItems = response.headers;\n\n        setData(response.data);\n        console.log(response.data);\n      } catch (err) {\n        setIsError(false);\n      }\n    })(url);\n  }, [url]);\n  return {\n    isLoading,\n    data,\n    isError\n  };\n};\n\n_s(useFetch, \"oJ+NG/Db4jOPUyHyXyTHFadXSVE=\", false, function () {\n  return [useGlobalContext];\n});\n\nexport default useFetch;","map":{"version":3,"sources":["/Users/matteopolo/reactProjects/Brewdog/src/useFetch.js"],"names":["useState","useEffect","axios","useGlobalContext","useFetch","query","type","baseUrl","inputPage","inputMinABV","inputMaxABV","isLoading","setIsLoading","data","setData","isError","setIsError","input","url","console","log","response","get","err"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,gBAAT,QAAiC,WAAjC;;AAGA,MAAMC,QAAQ,GAAG,CAACC,KAAD,EAAQC,IAAR,KAAiB;AAAA;;AAC9B,QAAMC,OAAO,GAAI,yCAAwCC,SAAU,WAAUC,WAAY,WAAUC,WAAY,EAA/G;AACA,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BZ,QAAQ,CAAC,IAAD,CAA1C;AACA,QAAM,CAACa,IAAD,EAAOC,OAAP,IAAkBd,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACe,OAAD,EAAUC,UAAV,IAAwBhB,QAAQ,CAAC,KAAD,CAAtC;AACA,QAAM;AAAEiB,IAAAA,KAAF;AAAST,IAAAA,SAAT;AAAoBC,IAAAA,WAApB;AAAiCC,IAAAA;AAAjC,MAAiDP,gBAAgB,EAAvE;AAEA,MAAIe,GAAG,GAAGX,OAAV;AAEAD,EAAAA,IAAI,KAAK,KAAT,GACI,CAACW,KAAD,GACMC,GAAG,GAAGX,OADZ,GAEMW,GAAG,GAAI,GAAEX,OAAQ,GAAEF,KAAM,EAHnC,GAOIJ,SAAS,CAAC,MAAM;AACZ,KAAC,YAAY;AACTe,MAAAA,UAAU,CAAC,KAAD,CAAV;AACAJ,MAAAA,YAAY,CAAC,KAAD,CAAZ;;AACA,UAAI;AACAO,QAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACA,cAAMG,QAAQ,GAAG,MAAMnB,KAAK,CAACoB,GAAN,CAAUJ,GAAV,CAAvB,CAFA,CAGA;;AACAJ,QAAAA,OAAO,CAACO,QAAQ,CAACR,IAAV,CAAP;AACAM,QAAAA,OAAO,CAACC,GAAR,CAAYC,QAAQ,CAACR,IAArB;AACH,OAND,CAME,OAAOU,GAAP,EAAY;AACVP,QAAAA,UAAU,CAAC,KAAD,CAAV;AACH;AACJ,KAZD,EAYGE,GAZH;AAaH,GAdQ,EAcN,CAACA,GAAD,CAdM,CAPb;AAsBA,SAAO;AAAEP,IAAAA,SAAF;AAAaE,IAAAA,IAAb;AAAmBE,IAAAA;AAAnB,GAAP;AAEH,CAjCD;;GAAMX,Q;UAKqDD,gB;;;AA8B3D,eAAeC,QAAf","sourcesContent":["import { useState, useEffect } from \"react\";\nimport axios from 'axios';\nimport { useGlobalContext } from \"./context\";\n\n\nconst useFetch = (query, type) => {\n    const baseUrl = `https://api.punkapi.com/v2/beers?page=${inputPage}&abv_gt=${inputMinABV}&abv_lt=${inputMaxABV}`;\n    const [isLoading, setIsLoading] = useState(true);\n    const [data, setData] = useState([]);\n    const [isError, setIsError] = useState(false);\n    const { input, inputPage, inputMinABV, inputMaxABV } = useGlobalContext();\n\n    let url = baseUrl;\n\n    type === false ?\n        !input\n            ? url = baseUrl\n            : url = `${baseUrl}${query}`\n        :\n\n\n        useEffect(() => {\n            (async () => {\n                setIsError(false);\n                setIsLoading(false);\n                try {\n                    console.log(url);\n                    const response = await axios.get(url);\n                    //   const totalItems = response.headers;\n                    setData(response.data);\n                    console.log(response.data);\n                } catch (err) {\n                    setIsError(false);\n                }\n            })(url)\n        }, [url]);\n    return { isLoading, data, isError };\n\n}\n\nexport default useFetch;"]},"metadata":{},"sourceType":"module"}