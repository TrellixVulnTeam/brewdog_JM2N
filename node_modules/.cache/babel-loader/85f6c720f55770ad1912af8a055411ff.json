{"ast":null,"code":"var _jsxFileName = \"/Users/matteopolo/reactProjects/Brewdog/src/context.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { useState, useContext, createContext } from \"react\";\nimport useFetch from \"./useFetch\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AppContext = /*#__PURE__*/createContext();\n\nconst AppProvider = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const [query, setQuery] = useState(1);\n  const [typeOfSearch, setTypeOfSearch] = useState(0);\n  const [inputPage, setInputPage] = useState(1);\n  const [inputMinABV, setInputMinABV] = useState(0);\n  const [inputMaxABV, setInputMaxABV] = useState(15);\n  const [type, setType] = useState(false);\n  const {\n    isLoading,\n    data,\n    isError,\n    count\n  } = useFetch(`${query}`, type);\n\n  const searchBeer = input => {\n    setQuery(`page=${inputPage}&abv_gt=${inputMinABV}}&abv_lt=${inputMaxABV}${typeOfSearch}${input}`);\n  };\n\n  return /*#__PURE__*/_jsxDEV(AppContext.Provider, {\n    value: {\n      type,\n      setType,\n      inputPage,\n      setInputPage,\n      typeOfSearch,\n      setTypeOfSearch,\n      setInputMinABV,\n      setInputMaxABV,\n      isLoading,\n      data,\n      isError,\n      count,\n      searchBeer\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 19,\n    columnNumber: 12\n  }, this);\n};\n\n_s(AppProvider, \"E6c7zRrpxLot6K+qeF5alL6748Q=\", false, function () {\n  return [useFetch];\n});\n\n_c = AppProvider;\n\nconst useGlobalContext = () => {\n  _s2();\n\n  return useContext(AppContext);\n};\n\n_s2(useGlobalContext, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nexport { AppProvider, useGlobalContext };\n\nvar _c;\n\n$RefreshReg$(_c, \"AppProvider\");","map":{"version":3,"sources":["/Users/matteopolo/reactProjects/Brewdog/src/context.js"],"names":["useState","useContext","createContext","useFetch","AppContext","AppProvider","children","query","setQuery","typeOfSearch","setTypeOfSearch","inputPage","setInputPage","inputMinABV","setInputMinABV","inputMaxABV","setInputMaxABV","type","setType","isLoading","data","isError","count","searchBeer","input","useGlobalContext"],"mappings":";;;;AAAA,SAASA,QAAT,EAAmBC,UAAnB,EAA+BC,aAA/B,QAAoD,OAApD;AACA,OAAOC,QAAP,MAAqB,YAArB;;AAEA,MAAMC,UAAU,gBAAGF,aAAa,EAAhC;;AAEA,MAAMG,WAAW,GAAG,QAAkB;AAAA;;AAAA,MAAjB;AAAEC,IAAAA;AAAF,GAAiB;AAClC,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBR,QAAQ,CAAC,CAAD,CAAlC;AACA,QAAM,CAACS,YAAD,EAAeC,eAAf,IAAkCV,QAAQ,CAAC,CAAD,CAAhD;AACA,QAAM,CAACW,SAAD,EAAYC,YAAZ,IAA4BZ,QAAQ,CAAC,CAAD,CAA1C;AACA,QAAM,CAACa,WAAD,EAAcC,cAAd,IAAgCd,QAAQ,CAAC,CAAD,CAA9C;AACA,QAAM,CAACe,WAAD,EAAcC,cAAd,IAAgChB,QAAQ,CAAC,EAAD,CAA9C;AACA,QAAM,CAACiB,IAAD,EAAOC,OAAP,IAAkBlB,QAAQ,CAAC,KAAD,CAAhC;AACA,QAAM;AAAEmB,IAAAA,SAAF;AAAaC,IAAAA,IAAb;AAAmBC,IAAAA,OAAnB;AAA4BC,IAAAA;AAA5B,MAAsCnB,QAAQ,CAAE,GAAEI,KAAM,EAAV,EAAaU,IAAb,CAApD;;AAEA,QAAMM,UAAU,GAAIC,KAAD,IAAW;AAC1BhB,IAAAA,QAAQ,CAAE,QAAOG,SAAU,WAAUE,WAAY,YAAWE,WAAY,GAAEN,YAAa,GAAEe,KAAM,EAAvF,CAAR;AACH,GAFD;;AAIA,sBAAO,QAAC,UAAD,CAAY,QAAZ;AAAqB,IAAA,KAAK,EAC7B;AACIP,MAAAA,IADJ;AAEIC,MAAAA,OAFJ;AAGIP,MAAAA,SAHJ;AAIIC,MAAAA,YAJJ;AAKIH,MAAAA,YALJ;AAMIC,MAAAA,eANJ;AAOII,MAAAA,cAPJ;AAQIE,MAAAA,cARJ;AASIG,MAAAA,SATJ;AAUIC,MAAAA,IAVJ;AAWIC,MAAAA,OAXJ;AAYIC,MAAAA,KAZJ;AAaIC,MAAAA;AAbJ,KADG;AAAA,cAgBFjB;AAhBE;AAAA;AAAA;AAAA;AAAA,UAAP;AAkBH,CA/BD;;GAAMD,W;UAO0CF,Q;;;KAP1CE,W;;AAiCN,MAAMoB,gBAAgB,GAAG,MAAM;AAAA;;AAC3B,SAAOxB,UAAU,CAACG,UAAD,CAAjB;AACH,CAFD;;IAAMqB,gB;;AAIN,SAASpB,WAAT,EAAsBoB,gBAAtB","sourcesContent":["import { useState, useContext, createContext } from \"react\";\nimport useFetch from \"./useFetch\";\n\nconst AppContext = createContext();\n\nconst AppProvider = ({ children }) => {\n    const [query, setQuery] = useState(1);\n    const [typeOfSearch, setTypeOfSearch] = useState(0);\n    const [inputPage, setInputPage] = useState(1);\n    const [inputMinABV, setInputMinABV] = useState(0);\n    const [inputMaxABV, setInputMaxABV] = useState(15);\n    const [type, setType] = useState(false);\n    const { isLoading, data, isError, count } = useFetch(`${query}`, type);\n\n    const searchBeer = (input) => {\n        setQuery(`page=${inputPage}&abv_gt=${inputMinABV}}&abv_lt=${inputMaxABV}${typeOfSearch}${input}`);\n    }\n\n    return <AppContext.Provider value={\n        {\n            type,\n            setType,\n            inputPage,\n            setInputPage,\n            typeOfSearch,\n            setTypeOfSearch,\n            setInputMinABV,\n            setInputMaxABV,\n            isLoading,\n            data,\n            isError,\n            count,\n            searchBeer,\n        }}>\n        {children}\n    </AppContext.Provider>\n}\n\nconst useGlobalContext = () => {\n    return useContext(AppContext)\n}\n\nexport { AppProvider, useGlobalContext };"]},"metadata":{},"sourceType":"module"}