{"ast":null,"code":"var _jsxFileName = \"/Users/matteopolo/reactProjects/Brewdog/src/context.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { useState, useContext, createContext, useEffect } from \"react\";\nimport useFetch from \"./useFetch\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AppContext = /*#__PURE__*/createContext();\n\nconst AppProvider = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const [query, setQuery] = useState('');\n  const [type, setType] = useState('');\n  const [queryHome, setQueryHome] = useState('');\n  const [querySingleBeer, setQuerySingleBeer] = useState('');\n  const [inputPage, setInputPage] = useState(1);\n  const [favouritesArray, setFavouritesArray] = useState([]);\n  const {\n    isLoading,\n    data,\n    isError,\n    count\n  } = useFetch(`${query}`, `${type}`);\n  useEffect(() => {\n    setQuery(queryHome);\n  }, [queryHome]);\n  useEffect(() => {\n    setQuery(querySingleBeer);\n  }, [querySingleBeer]);\n  return /*#__PURE__*/_jsxDEV(AppContext.Provider, {\n    value: {\n      inputPage,\n      setInputPage,\n      query,\n      queryHome,\n      setQueryHome,\n      querySingleBeer,\n      setQuerySingleBeer,\n      isLoading,\n      data,\n      isError,\n      count,\n      favouritesArray,\n      setFavouritesArray\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 12\n  }, this);\n};\n\n_s(AppProvider, \"5TljP7lxtzKUqvJn7kg2tZ7DGLI=\", false, function () {\n  return [useFetch];\n});\n\n_c = AppProvider;\n\nconst useGlobalContext = () => {\n  _s2();\n\n  return useContext(AppContext);\n};\n\n_s2(useGlobalContext, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nexport { AppProvider, useGlobalContext };\n\nvar _c;\n\n$RefreshReg$(_c, \"AppProvider\");","map":{"version":3,"sources":["/Users/matteopolo/reactProjects/Brewdog/src/context.js"],"names":["useState","useContext","createContext","useEffect","useFetch","AppContext","AppProvider","children","query","setQuery","type","setType","queryHome","setQueryHome","querySingleBeer","setQuerySingleBeer","inputPage","setInputPage","favouritesArray","setFavouritesArray","isLoading","data","isError","count","useGlobalContext"],"mappings":";;;;AAAA,SAASA,QAAT,EAAmBC,UAAnB,EAA+BC,aAA/B,EAA8CC,SAA9C,QAA+D,OAA/D;AACA,OAAOC,QAAP,MAAqB,YAArB;;AAEA,MAAMC,UAAU,gBAAGH,aAAa,EAAhC;;AAEA,MAAMI,WAAW,GAAG,QAAkB;AAAA;;AAAA,MAAjB;AAAEC,IAAAA;AAAF,GAAiB;AAElC,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBT,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACU,IAAD,EAAOC,OAAP,IAAkBX,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACY,SAAD,EAAYC,YAAZ,IAA4Bb,QAAQ,CAAC,EAAD,CAA1C;AACA,QAAM,CAACc,eAAD,EAAkBC,kBAAlB,IAAwCf,QAAQ,CAAC,EAAD,CAAtD;AACA,QAAM,CAACgB,SAAD,EAAYC,YAAZ,IAA4BjB,QAAQ,CAAC,CAAD,CAA1C;AACA,QAAM,CAACkB,eAAD,EAAkBC,kBAAlB,IAAwCnB,QAAQ,CAAC,EAAD,CAAtD;AAEA,QAAM;AAAEoB,IAAAA,SAAF;AAAaC,IAAAA,IAAb;AAAmBC,IAAAA,OAAnB;AAA4BC,IAAAA;AAA5B,MAAsCnB,QAAQ,CAAE,GAAEI,KAAM,EAAV,EAAc,GAAEE,IAAK,EAArB,CAApD;AAEAP,EAAAA,SAAS,CAAC,MAAM;AAAEM,IAAAA,QAAQ,CAACG,SAAD,CAAR;AAAqB,GAA9B,EAAgC,CAACA,SAAD,CAAhC,CAAT;AACAT,EAAAA,SAAS,CAAC,MAAM;AAAEM,IAAAA,QAAQ,CAACK,eAAD,CAAR;AAA2B,GAApC,EAAsC,CAACA,eAAD,CAAtC,CAAT;AAEA,sBAAO,QAAC,UAAD,CAAY,QAAZ;AAAqB,IAAA,KAAK,EAC7B;AACIE,MAAAA,SADJ;AAEIC,MAAAA,YAFJ;AAGIT,MAAAA,KAHJ;AAIII,MAAAA,SAJJ;AAKIC,MAAAA,YALJ;AAMIC,MAAAA,eANJ;AAOIC,MAAAA,kBAPJ;AAQIK,MAAAA,SARJ;AASIC,MAAAA,IATJ;AAUIC,MAAAA,OAVJ;AAWIC,MAAAA,KAXJ;AAYIL,MAAAA,eAZJ;AAaIC,MAAAA;AAbJ,KADG;AAAA,cAiBFZ;AAjBE;AAAA;AAAA;AAAA;AAAA,UAAP;AAmBH,CAjCD;;GAAMD,W;UAS0CF,Q;;;KAT1CE,W;;AAmCN,MAAMkB,gBAAgB,GAAG,MAAM;AAAA;;AAC3B,SAAOvB,UAAU,CAACI,UAAD,CAAjB;AACH,CAFD;;IAAMmB,gB;;AAIN,SAASlB,WAAT,EAAsBkB,gBAAtB","sourcesContent":["import { useState, useContext, createContext, useEffect } from \"react\";\nimport useFetch from \"./useFetch\";\n\nconst AppContext = createContext();\n\nconst AppProvider = ({ children }) => {\n\n    const [query, setQuery] = useState('');\n    const [type, setType] = useState('');\n    const [queryHome, setQueryHome] = useState('');\n    const [querySingleBeer, setQuerySingleBeer] = useState('');\n    const [inputPage, setInputPage] = useState(1);\n    const [favouritesArray, setFavouritesArray] = useState([]);\n\n    const { isLoading, data, isError, count } = useFetch(`${query}`, `${type}`);\n\n    useEffect(() => { setQuery(queryHome) }, [queryHome]);\n    useEffect(() => { setQuery(querySingleBeer) }, [querySingleBeer]);\n\n    return <AppContext.Provider value={\n        {\n            inputPage,\n            setInputPage,\n            query,\n            queryHome,\n            setQueryHome,\n            querySingleBeer,\n            setQuerySingleBeer,\n            isLoading,\n            data,\n            isError,\n            count,\n            favouritesArray,\n            setFavouritesArray,\n\n        }}>\n        {children}\n    </AppContext.Provider>\n}\n\nconst useGlobalContext = () => {\n    return useContext(AppContext)\n}\n\nexport { AppProvider, useGlobalContext };"]},"metadata":{},"sourceType":"module"}