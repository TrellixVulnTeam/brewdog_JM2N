{"ast":null,"code":"var _jsxFileName = \"/Users/matteopolo/reactProjects/Brewdog/src/context.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { useState, useContext, createContext } from \"react\";\nimport useFetch from \"./useFetch\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AppContext = /*#__PURE__*/createContext();\n\nconst AppProvider = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const [input, setInput] = useState('');\n  const [query, setQuery] = useState(1);\n  const [typeOfSearch, setTypeOfSearch] = useState('&beer_name=');\n  const [inputPage, setInputPage] = useState(1);\n  const [inputMinABV, setInputMinABV] = useState(0);\n  const [inputMaxABV, setInputMaxABV] = useState(15);\n  const [type, setType] = useState(false);\n  const {\n    isLoading,\n    data,\n    isError,\n    count\n  } = useFetch(`${query}`, type);\n\n  const searchBeer = input => {\n    setQuery(`${typeOfSearch}${input}`);\n  };\n\n  return /*#__PURE__*/_jsxDEV(AppContext.Provider, {\n    value: {\n      type,\n      setType,\n      input,\n      setInput,\n      inputPage,\n      setInputPage,\n      typeOfSearch,\n      setTypeOfSearch,\n      setInputMinABV,\n      setInputMaxABV,\n      isLoading,\n      data,\n      isError,\n      count,\n      searchBeer\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 12\n  }, this);\n};\n\n_s(AppProvider, \"0X6hyVRFT/Mv3JYCkPftwUPfm9Y=\", false, function () {\n  return [useFetch];\n});\n\n_c = AppProvider;\n\nconst useGlobalContext = () => {\n  _s2();\n\n  return useContext(AppContext);\n};\n\n_s2(useGlobalContext, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nexport { AppProvider, useGlobalContext };\n\nvar _c;\n\n$RefreshReg$(_c, \"AppProvider\");","map":{"version":3,"sources":["/Users/matteopolo/reactProjects/Brewdog/src/context.js"],"names":["useState","useContext","createContext","useFetch","AppContext","AppProvider","children","input","setInput","query","setQuery","typeOfSearch","setTypeOfSearch","inputPage","setInputPage","inputMinABV","setInputMinABV","inputMaxABV","setInputMaxABV","type","setType","isLoading","data","isError","count","searchBeer","useGlobalContext"],"mappings":";;;;AAAA,SAASA,QAAT,EAAmBC,UAAnB,EAA+BC,aAA/B,QAAoD,OAApD;AACA,OAAOC,QAAP,MAAqB,YAArB;;AAEA,MAAMC,UAAU,gBAAGF,aAAa,EAAhC;;AAEA,MAAMG,WAAW,GAAG,QAAkB;AAAA;;AAAA,MAAjB;AAAEC,IAAAA;AAAF,GAAiB;AAClC,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBR,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACS,KAAD,EAAQC,QAAR,IAAoBV,QAAQ,CAAC,CAAD,CAAlC;AACA,QAAM,CAACW,YAAD,EAAeC,eAAf,IAAkCZ,QAAQ,CAAC,aAAD,CAAhD;AACA,QAAM,CAACa,SAAD,EAAYC,YAAZ,IAA4Bd,QAAQ,CAAC,CAAD,CAA1C;AACA,QAAM,CAACe,WAAD,EAAcC,cAAd,IAAgChB,QAAQ,CAAC,CAAD,CAA9C;AACA,QAAM,CAACiB,WAAD,EAAcC,cAAd,IAAgClB,QAAQ,CAAC,EAAD,CAA9C;AACA,QAAM,CAACmB,IAAD,EAAOC,OAAP,IAAkBpB,QAAQ,CAAC,KAAD,CAAhC;AACA,QAAM;AAAEqB,IAAAA,SAAF;AAAaC,IAAAA,IAAb;AAAmBC,IAAAA,OAAnB;AAA4BC,IAAAA;AAA5B,MAAsCrB,QAAQ,CAAE,GAAEM,KAAM,EAAV,EAAaU,IAAb,CAApD;;AAEA,QAAMM,UAAU,GAAIlB,KAAD,IAAW;AAC1BG,IAAAA,QAAQ,CAAE,GAAEC,YAAa,GAAEJ,KAAM,EAAzB,CAAR;AACH,GAFD;;AAIA,sBAAO,QAAC,UAAD,CAAY,QAAZ;AAAqB,IAAA,KAAK,EAC7B;AACIY,MAAAA,IADJ;AAEIC,MAAAA,OAFJ;AAGIb,MAAAA,KAHJ;AAIIC,MAAAA,QAJJ;AAKIK,MAAAA,SALJ;AAMIC,MAAAA,YANJ;AAOIH,MAAAA,YAPJ;AAQIC,MAAAA,eARJ;AASII,MAAAA,cATJ;AAUIE,MAAAA,cAVJ;AAWIG,MAAAA,SAXJ;AAYIC,MAAAA,IAZJ;AAaIC,MAAAA,OAbJ;AAcIC,MAAAA,KAdJ;AAeIC,MAAAA;AAfJ,KADG;AAAA,cAkBFnB;AAlBE;AAAA;AAAA;AAAA;AAAA,UAAP;AAoBH,CAlCD;;GAAMD,W;UAQ0CF,Q;;;KAR1CE,W;;AAoCN,MAAMqB,gBAAgB,GAAG,MAAM;AAAA;;AAC3B,SAAOzB,UAAU,CAACG,UAAD,CAAjB;AACH,CAFD;;IAAMsB,gB;;AAIN,SAASrB,WAAT,EAAsBqB,gBAAtB","sourcesContent":["import { useState, useContext, createContext } from \"react\";\nimport useFetch from \"./useFetch\";\n\nconst AppContext = createContext();\n\nconst AppProvider = ({ children }) => {\n    const [input, setInput] = useState('');\n    const [query, setQuery] = useState(1);\n    const [typeOfSearch, setTypeOfSearch] = useState('&beer_name=');\n    const [inputPage, setInputPage] = useState(1);\n    const [inputMinABV, setInputMinABV] = useState(0);\n    const [inputMaxABV, setInputMaxABV] = useState(15);\n    const [type, setType] = useState(false);\n    const { isLoading, data, isError, count } = useFetch(`${query}`, type);\n\n    const searchBeer = (input) => {\n        setQuery(`${typeOfSearch}${input}`);\n    }\n\n    return <AppContext.Provider value={\n        {\n            type,\n            setType,\n            input,\n            setInput,\n            inputPage,\n            setInputPage,\n            typeOfSearch,\n            setTypeOfSearch,\n            setInputMinABV,\n            setInputMaxABV,\n            isLoading,\n            data,\n            isError,\n            count,\n            searchBeer,\n        }}>\n        {children}\n    </AppContext.Provider>\n}\n\nconst useGlobalContext = () => {\n    return useContext(AppContext)\n}\n\nexport { AppProvider, useGlobalContext };"]},"metadata":{},"sourceType":"module"}