{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nimport axios from 'axios';\nimport { useGlobalContext } from \"./context\";\n\nconst useFetch = (query, type) => {\n  _s();\n\n  const [isLoading, setIsLoading] = useState(true);\n  const [data, setData] = useState([]);\n  const [isError, setIsError] = useState(false);\n  const {\n    input,\n    inputPage,\n    inputMinABV,\n    inputMaxABV\n  } = useGlobalContext();\n  const searchUrl = `https://api.punkapi.com/v2/beers?page=${inputPage}&abv_gt=${inputMinABV}&abv_lt=${inputMaxABV}`;\n  const singleUrl = `https://api.punkapi.com/v2/beers?`;\n  let url = searchUrl;\n  type === false ? !input ? url = searchUrl : url = `${searchUrl}${query}` : url = singleUrl;\n  useEffect(() => {\n    (async () => {\n      setIsError(false);\n      setIsLoading(false);\n\n      try {\n        console.log(url);\n        const response = await axios.get(url); //   const totalItems = response.headers;\n\n        setData(response.data);\n        console.log(response.data);\n      } catch (err) {\n        setIsError(false);\n      }\n    })(url);\n  }, [url]);\n  return {\n    isLoading,\n    data,\n    isError\n  };\n};\n\n_s(useFetch, \"oJ+NG/Db4jOPUyHyXyTHFadXSVE=\", false, function () {\n  return [useGlobalContext];\n});\n\nexport default useFetch;","map":{"version":3,"sources":["/Users/matteopolo/reactProjects/Brewdog/src/useFetch.js"],"names":["useState","useEffect","axios","useGlobalContext","useFetch","query","type","isLoading","setIsLoading","data","setData","isError","setIsError","input","inputPage","inputMinABV","inputMaxABV","searchUrl","singleUrl","url","console","log","response","get","err"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,gBAAT,QAAiC,WAAjC;;AAGA,MAAMC,QAAQ,GAAG,CAACC,KAAD,EAAQC,IAAR,KAAiB;AAAA;;AAC9B,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BR,QAAQ,CAAC,IAAD,CAA1C;AACA,QAAM,CAACS,IAAD,EAAOC,OAAP,IAAkBV,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACW,OAAD,EAAUC,UAAV,IAAwBZ,QAAQ,CAAC,KAAD,CAAtC;AACA,QAAM;AAAEa,IAAAA,KAAF;AAASC,IAAAA,SAAT;AAAoBC,IAAAA,WAApB;AAAiCC,IAAAA;AAAjC,MAAiDb,gBAAgB,EAAvE;AACA,QAAMc,SAAS,GAAI,yCAAwCH,SAAU,WAAUC,WAAY,WAAUC,WAAY,EAAjH;AACA,QAAME,SAAS,GAAI,mCAAnB;AACA,MAAIC,GAAG,GAAGF,SAAV;AAEAX,EAAAA,IAAI,KAAK,KAAT,GACI,CAACO,KAAD,GACMM,GAAG,GAAGF,SADZ,GAEME,GAAG,GAAI,GAAEF,SAAU,GAAEZ,KAAM,EAHrC,GAIMc,GAAG,GAAGD,SAJZ;AAOAjB,EAAAA,SAAS,CAAC,MAAM;AACZ,KAAC,YAAY;AACTW,MAAAA,UAAU,CAAC,KAAD,CAAV;AACAJ,MAAAA,YAAY,CAAC,KAAD,CAAZ;;AACA,UAAI;AACAY,QAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACA,cAAMG,QAAQ,GAAG,MAAMpB,KAAK,CAACqB,GAAN,CAAUJ,GAAV,CAAvB,CAFA,CAGA;;AACAT,QAAAA,OAAO,CAACY,QAAQ,CAACb,IAAV,CAAP;AACAW,QAAAA,OAAO,CAACC,GAAR,CAAYC,QAAQ,CAACb,IAArB;AACH,OAND,CAME,OAAOe,GAAP,EAAY;AACVZ,QAAAA,UAAU,CAAC,KAAD,CAAV;AACH;AACJ,KAZD,EAYGO,GAZH;AAaH,GAdQ,EAcN,CAACA,GAAD,CAdM,CAAT;AAeA,SAAO;AAAEZ,IAAAA,SAAF;AAAaE,IAAAA,IAAb;AAAmBE,IAAAA;AAAnB,GAAP;AAEH,CAjCD;;GAAMP,Q;UAIqDD,gB;;;AA+B3D,eAAeC,QAAf","sourcesContent":["import { useState, useEffect } from \"react\";\nimport axios from 'axios';\nimport { useGlobalContext } from \"./context\";\n\n\nconst useFetch = (query, type) => {\n    const [isLoading, setIsLoading] = useState(true);\n    const [data, setData] = useState([]);\n    const [isError, setIsError] = useState(false);\n    const { input, inputPage, inputMinABV, inputMaxABV } = useGlobalContext();\n    const searchUrl = `https://api.punkapi.com/v2/beers?page=${inputPage}&abv_gt=${inputMinABV}&abv_lt=${inputMaxABV}`;\n    const singleUrl = `https://api.punkapi.com/v2/beers?`;\n    let url = searchUrl;\n\n    type === false ?\n        !input\n            ? url = searchUrl\n            : url = `${searchUrl}${query}`\n        : url = singleUrl;\n\n\n    useEffect(() => {\n        (async () => {\n            setIsError(false);\n            setIsLoading(false);\n            try {\n                console.log(url);\n                const response = await axios.get(url);\n                //   const totalItems = response.headers;\n                setData(response.data);\n                console.log(response.data);\n            } catch (err) {\n                setIsError(false);\n            }\n        })(url)\n    }, [url]);\n    return { isLoading, data, isError };\n\n}\n\nexport default useFetch;"]},"metadata":{},"sourceType":"module"}