{"ast":null,"code":"var _jsxFileName = \"/Users/matteopolo/reactProjects/Brewdog/src/context.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { useState, useContext, createContext } from \"react\";\nimport useFetch from \"./useFetch\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AppContext = /*#__PURE__*/createContext();\n\nconst AppProvider = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const [queryPage, setQueryPage] = useState(1);\n  const [queryBeerName, setQueryBeerName] = useState('');\n  const [typeOfSearch, setTypeOfSearch] = useState(0); //const [queryMinABV, setQueryMinABV] = useState(0);\n  //const [queryMaxABV, setQueryMaxABV] = useState(15);\n\n  const [type, setType] = useState(false);\n  const {\n    isLoading,\n    data,\n    isError,\n    count\n  } = useFetch(`${queryPage}`, `${queryBeerName}`);\n\n  const searchBeer = input => {\n    setQueryBeerName(input); //setQueryMinABV (inputMin);\n    //setQueryMaxABV (inputMax);\n  };\n\n  return /*#__PURE__*/_jsxDEV(AppContext.Provider, {\n    value: {\n      type,\n      setType,\n      queryPage,\n      setQueryPage,\n      queryBeerName,\n      setQueryBeerName,\n      //setQueryMinABV,\n      //queryMaABV,\n      //setQueryMaxABV,\n      isLoading,\n      data,\n      isError,\n      count,\n      searchBeer\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 12\n  }, this);\n};\n\n_s(AppProvider, \"678K61qcJaUexMG8nMIBOprryLo=\", false, function () {\n  return [useFetch];\n});\n\n_c = AppProvider;\n\nconst useGlobalContext = () => {\n  _s2();\n\n  return useContext(AppContext);\n};\n\n_s2(useGlobalContext, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nexport { AppProvider, useGlobalContext };\n\nvar _c;\n\n$RefreshReg$(_c, \"AppProvider\");","map":{"version":3,"sources":["/Users/matteopolo/reactProjects/Brewdog/src/context.js"],"names":["useState","useContext","createContext","useFetch","AppContext","AppProvider","children","queryPage","setQueryPage","queryBeerName","setQueryBeerName","typeOfSearch","setTypeOfSearch","type","setType","isLoading","data","isError","count","searchBeer","input","useGlobalContext"],"mappings":";;;;AAAA,SAASA,QAAT,EAAmBC,UAAnB,EAA+BC,aAA/B,QAAoD,OAApD;AACA,OAAOC,QAAP,MAAqB,YAArB;;AAEA,MAAMC,UAAU,gBAAGF,aAAa,EAAhC;;AAEA,MAAMG,WAAW,GAAG,QAAkB;AAAA;;AAAA,MAAjB;AAAEC,IAAAA;AAAF,GAAiB;AAClC,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BR,QAAQ,CAAC,CAAD,CAA1C;AACA,QAAM,CAACS,aAAD,EAAgBC,gBAAhB,IAAoCV,QAAQ,CAAC,EAAD,CAAlD;AACA,QAAM,CAACW,YAAD,EAAeC,eAAf,IAAkCZ,QAAQ,CAAC,CAAD,CAAhD,CAHkC,CAIlC;AACA;;AACA,QAAM,CAACa,IAAD,EAAOC,OAAP,IAAkBd,QAAQ,CAAC,KAAD,CAAhC;AACA,QAAM;AAAEe,IAAAA,SAAF;AAAaC,IAAAA,IAAb;AAAmBC,IAAAA,OAAnB;AAA4BC,IAAAA;AAA5B,MAAsCf,QAAQ,CAAE,GAAEI,SAAU,EAAd,EAAkB,GAAEE,aAAc,EAAlC,CAApD;;AAEA,QAAMU,UAAU,GAAIC,KAAD,IAAW;AAC1BV,IAAAA,gBAAgB,CAACU,KAAD,CAAhB,CAD0B,CAE1B;AACA;AACH,GAJD;;AAMA,sBAAO,QAAC,UAAD,CAAY,QAAZ;AAAqB,IAAA,KAAK,EAC7B;AACIP,MAAAA,IADJ;AAEIC,MAAAA,OAFJ;AAGIP,MAAAA,SAHJ;AAIIC,MAAAA,YAJJ;AAKIC,MAAAA,aALJ;AAMIC,MAAAA,gBANJ;AAOI;AACA;AACA;AACAK,MAAAA,SAVJ;AAWIC,MAAAA,IAXJ;AAYIC,MAAAA,OAZJ;AAaIC,MAAAA,KAbJ;AAcIC,MAAAA;AAdJ,KADG;AAAA,cAiBFb;AAjBE;AAAA;AAAA;AAAA;AAAA,UAAP;AAmBH,CAlCD;;GAAMD,W;UAO0CF,Q;;;KAP1CE,W;;AAoCN,MAAMgB,gBAAgB,GAAG,MAAM;AAAA;;AAC3B,SAAOpB,UAAU,CAACG,UAAD,CAAjB;AACH,CAFD;;IAAMiB,gB;;AAIN,SAAShB,WAAT,EAAsBgB,gBAAtB","sourcesContent":["import { useState, useContext, createContext } from \"react\";\nimport useFetch from \"./useFetch\";\n\nconst AppContext = createContext();\n\nconst AppProvider = ({ children }) => {\n    const [queryPage, setQueryPage] = useState(1);\n    const [queryBeerName, setQueryBeerName] = useState('');\n    const [typeOfSearch, setTypeOfSearch] = useState(0);\n    //const [queryMinABV, setQueryMinABV] = useState(0);\n    //const [queryMaxABV, setQueryMaxABV] = useState(15);\n    const [type, setType] = useState(false);\n    const { isLoading, data, isError, count } = useFetch(`${queryPage}`, `${queryBeerName}`);\n\n    const searchBeer = (input) => {\n        setQueryBeerName(input);\n        //setQueryMinABV (inputMin);\n        //setQueryMaxABV (inputMax);\n    }\n\n    return <AppContext.Provider value={\n        {\n            type,\n            setType,\n            queryPage,\n            setQueryPage,\n            queryBeerName,\n            setQueryBeerName,\n            //setQueryMinABV,\n            //queryMaABV,\n            //setQueryMaxABV,\n            isLoading,\n            data,\n            isError,\n            count,\n            searchBeer,\n        }}>\n        {children}\n    </AppContext.Provider>\n}\n\nconst useGlobalContext = () => {\n    return useContext(AppContext)\n}\n\nexport { AppProvider, useGlobalContext };"]},"metadata":{},"sourceType":"module"}